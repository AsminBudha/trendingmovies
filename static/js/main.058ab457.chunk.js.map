{"version":3,"sources":["configs/api.js","components/movieCard/MovieCard.js","utils/queryGenerator.js","utils/extractGenre.js","components/categoryWrapper/CategoryWrapper.js","configs/constant.js","services/configuredAxios.js","services/fetchTrendings.js","services/fetchGenre.js","utils/objectUtility.js","services/fetchExternal.js","screens/home/Home.js","App.js","serviceWorker.js","index.js"],"names":["IMDB_URL","TRENDING_URL","process","GENRE_URL","EXTERNAL_ID_URL","MovieCard","query","this","props","data","name","title","genre_ids","media_type","poster_path","vote_average","external_ids","movieTitle","className","target","href","imdb_id","replace","alt","src","width","reduce","acc","id","genre","category","genreId","genreDict","JSON","parse","localStorage","getItem","console","log","getGenreText","React","Component","CategoryWrapper","dataList","map","key","categories","axiosInstance","axios","create","fetchTrendingByKey","get","fetchGenreByCategoryKey","categoryKey","arrayToObjectById","arrayData","fetchExternalIdsByMovieId","movieId","interceptors","request","use","config","params","api_key","error","Promise","reject","Home","state","currentPage","isLoading","mergeExternalIdWithMovieData","movieExternal","movieData","movie","index","fetchData","a","fetchMovieData","fetchGenre","forEach","setItem","stringify","genres","tvDataWithExternalIds","results","movieDataWithExternalIds","fetchExternalIds","movieExternalId","tvExternalId","item","setState","errorMessage","Axios","all","movieList","then","res","catch","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.058ab457.chunk.js","sourcesContent":["export const IMAGE_THUMBNAIL_URL = \"https://image.tmdb.org/t/p/w200/:imageId\";\n\nexport const IMDB_URL = \"https://www.imdb.com/title/:imdbId\";\n\nexport const TRENDING_URL = `${process.env.REACT_APP_BASE_URL}/trending/:key/day`;\n\nexport const GENRE_URL = `${process.env.REACT_APP_BASE_URL}/genre/:categoryKey/list`;\n\nexport const EXTERNAL_ID_URL = `${process.env.REACT_APP_BASE_URL}/movie/:movieId/external_ids`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { IMAGE_THUMBNAIL_URL, IMDB_URL } from \"../../configs/api\";\nimport { youtubeSearchQueryGenerator } from \"../../utils/queryGenerator\";\nimport { getGenreText } from \"../../utils/extractGenre\";\n\nclass MovieCard extends React.Component {\n  render() {\n    const {\n      name,\n      title,\n      genre_ids,\n      media_type,\n      poster_path,\n      vote_average,\n      external_ids\n    } = this.props.data;\n    const movieTitle = name || title;\n\n    return (\n      <div className=\"card-wrapper\">\n        <a\n          target=\"_\"\n          href={\n            external_ids && external_ids.imdb_id\n              ? IMDB_URL.replace(\":imdbId\", external_ids.imdb_id)\n              : \"#\"\n          }\n          title={movieTitle}\n        >\n          <img\n            alt={movieTitle}\n            src={IMAGE_THUMBNAIL_URL.replace(\":imageId\", poster_path)}\n            width=\"120\"\n          />\n        </a>\n\n        <div className=\"card-content\">\n          <h2 className=\"rating-text\">\n            {vote_average}\n            <span className=\"secondary-text\">/10</span>\n          </h2>\n          <h2 className=\"movie-title-text\">\n            <a\n              target=\"_\"\n              href={\n                external_ids && external_ids.imdb_id\n                  ? IMDB_URL.replace(\":imdbId\", external_ids.imdb_id)\n                  : \"#\"\n              }\n              title={movieTitle}\n            >{`${movieTitle} `}</a>\n            <span className=\"secondary-text genre-text\">\n              {genre_ids.reduce((acc, id) => {\n                const genre = getGenreText(media_type, id);\n                if (genre) {\n                  if (acc) {\n                    acc += ` \\u2022 ${genre} `;\n                  } else {\n                    acc += ` ${genre} `;\n                  }\n                }\n\n                return acc;\n              }, \"\")}\n            </span>\n          </h2>\n          <a\n            target=\"_\"\n            className=\"secondary-text trailer-a\"\n            href={youtubeSearchQueryGenerator(movieTitle)}\n            title={movieTitle}\n          >\n            Watch Trailer\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  data: PropTypes.object\n};\n\nexport default MovieCard;\n","export function youtubeSearchQueryGenerator(query) {\n  return `https://www.youtube.com/results?search_query=${query.replace(\n    / /g,\n    \"+\"\n  )}+1080p+trailer`;\n}\n","export function getGenreText(category, genreId) {\n  const genreDict = JSON.parse(localStorage.getItem(category));\n\n  console.log(genreDict[genreId]);\n  return genreDict[genreId] ? genreDict[genreId].name : \"\";\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport MovieCard from \"../movieCard/MovieCard\";\n\nclass CategoryWrapper extends React.Component {\n  render() {\n    return (\n      <div className=\"category-wrapper\">\n        <h1 className=\"category-title-text\">{this.props.title}</h1>\n        <ul>\n          {this.props.dataList.map(data => {\n            return (\n              <li key={data.id}>\n                <MovieCard data={data} />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nCategoryWrapper.propTypes = {\n  title: PropTypes.string,\n  dataList: PropTypes.array\n};\n\nexport default CategoryWrapper;\n","export const categories = [\n  {\n    title: \"Trending TV Shows\",\n    key: \"tv\"\n  },\n  {\n    title: \"Trending Movies\",\n    key: \"movie\"\n  }\n];\n","import axios from \"axios\";\n\nexport const axiosInstance = axios.create();\n\naxiosInstance.interceptors.request.use(\n  function(config) {\n    // Do something before request is sent\n\n    config.params = {\n      api_key: process.env.REACT_APP_API_KEY\n    };\n\n    return config;\n  },\n  function(error) {\n    // Do something with request error\n    return Promise.reject(error);\n  }\n);\n","import { axiosInstance } from \"./configuredAxios\";\nimport { TRENDING_URL } from \"../configs/api\";\n\nexport function fetchTrendingByKey(key) {\n  return axiosInstance.get(TRENDING_URL.replace(\":key\", key));\n}\n","import { axiosInstance } from \"./configuredAxios\";\nimport { GENRE_URL } from \"../configs/api\";\n\nexport function fetchGenreByCategoryKey(categoryKey) {\n  return axiosInstance.get(GENRE_URL.replace(\":categoryKey\", categoryKey));\n}\n","export function arrayToObjectById(arrayData) {\n  return arrayData.reduce((acc, data) => {\n    acc[data.id] = data;\n\n    return acc;\n  }, {});\n}\n","import { axiosInstance } from \"./configuredAxios\";\nimport { EXTERNAL_ID_URL } from \"../configs/api\";\n\nexport function fetchExternalIdsByMovieId(movieId) {\n  return axiosInstance.get(EXTERNAL_ID_URL.replace(\":movieId\", movieId));\n}\n","import React from \"react\";\n\nimport CategoryWrapper from \"../../components/categoryWrapper/CategoryWrapper\";\nimport { categories } from \"../../configs/constant\";\nimport Axios from \"axios\";\nimport { fetchTrendingByKey } from \"../../services/fetchTrendings\";\nimport { fetchGenreByCategoryKey } from \"../../services/fetchGenre\";\nimport { arrayToObjectById } from \"../../utils/objectUtility\";\nimport { fetchExternalIdsByMovieId } from \"../../services/fetchExternal\";\n\nclass Home extends React.Component {\n  state = {\n    currentPage: 1,\n    isLoading: true,\n    [categories[0].key]: {},\n    [categories[1].key]: {},\n    errorMessage: null\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  mergeExternalIdWithMovieData = (movieExternal, movieData) => {\n    return movieData.map((movie, index) => {\n      movie.external_ids = movieExternal[index];\n\n      return movie;\n    });\n  };\n\n  fetchData = async () => {\n    try {\n      let movieData = await this.fetchMovieData();\n\n      try {\n        let genreData = await this.fetchGenre();\n\n        genreData.forEach((genre, index) => {\n          localStorage.setItem(\n            categories[index].key,\n            JSON.stringify(arrayToObjectById(genre.data.genres))\n          );\n        });\n      } catch (err) {\n        //TODO: Handle case when unable to fetch genre data\n        console.log(err);\n      }\n\n      let tvDataWithExternalIds = movieData[0].data.results;\n\n      let movieDataWithExternalIds = movieData[1].data.results;\n\n      try {\n        let movieExternalId = await this.fetchExternalIds(\n          movieData[0].data.results\n        );\n\n        let tvExternalId = await this.fetchExternalIds(\n          movieData[1].data.results\n        );\n\n        movieDataWithExternalIds = this.mergeExternalIdWithMovieData(\n          movieExternalId.map(item => item.data),\n          movieDataWithExternalIds\n        );\n        tvDataWithExternalIds = this.mergeExternalIdWithMovieData(\n          tvExternalId.map(item => item.data),\n          tvDataWithExternalIds\n        );\n      } catch (err) {\n        //TODO: Handle case when error in external ids\n        console.log(err);\n      }\n\n      this.setState({\n        isLoading: false,\n        errorMessage: null,\n        [categories[0].key]: {\n          ...movieData[0].data,\n          results: tvDataWithExternalIds\n        },\n        [categories[1].key]: {\n          ...movieData[1].data,\n          results: movieDataWithExternalIds\n        }\n      });\n    } catch (err) {\n      this.setState({\n        isLoading: false,\n        errorMessage: \"Could not fetch data\"\n      });\n    }\n  };\n\n  fetchGenre = () => {\n    return Axios.all(\n      categories.map(category => fetchGenreByCategoryKey(category.key))\n    );\n  };\n\n  fetchMovieData = () => {\n    return Axios.all(categories.map(item => fetchTrendingByKey(item.key)));\n  };\n\n  fetchExternalIds = movieList => {\n    return Axios.all(\n      movieList.map(async movie =>\n        fetchExternalIdsByMovieId(movie.id)\n          .then(res => res)\n          .catch(() => ({ data: {} }))\n      )\n    );\n  };\n\n  render() {\n    if (this.state.isLoading) {\n      return <div className=\"container error-text\">Loading...</div>;\n    } else if (this.state.errorMessage) {\n      return (\n        <div className=\"container error-text\">{this.state.errorMessage}</div>\n      );\n    }\n\n    return (\n      <div>\n        <a src=\"#\" className=\"container logo\">\n          <img\n            src=\"https://www.themoviedb.org/assets/1/v4/logos/primary-green-d70eebe18a5eb5b166d5c1ef0796715b8d1a2cbc698f96d311d62f894ae87085.svg\"\n            alt=\"Trending Movies Logo\"\n            width=\"80\"\n          />\n        </a>\n\n        <div className=\"container\">\n          <CategoryWrapper\n            title={categories[0].title}\n            dataList={this.state[categories[0].key].results || []}\n          />\n          <CategoryWrapper\n            title={categories[1].title}\n            dataList={this.state[categories[1].key].results || []}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport Home from \"./screens/home/Home.js\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./styles/index\";\n\n// import \"./configs/config\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}